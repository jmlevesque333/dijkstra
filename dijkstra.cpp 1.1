#include <iostream>
#include <vector>
#include <fstream>
#include <sstream>
#include <utility>
#include <string>
#include <map>


using namespace std;

struct node
{
	string prev;
	int dist;
	bool vue;
};

int main()
{
	fstream file;
	file.open("input.txt");
	string valeur;
	string pere;
	string fils;
	int dist;
	map < string, node > distMap;
	map < string, node >::iterator it;
	map < string,vector < pair <string,int> > > graph;

	while(file.eof() == false)
	{
		getline(file, valeur);
		stringstream s(valeur);
		s >> pere;
		cout << "pere: " << pere << " ";
		graph[pere];
		distMap[pere].dist = -1;
		distMap[pere].prev = "-1";
		distMap[pere].vue = false;
		while(s >> fils)
		{
			s >> dist;
			cout << " -> "<< "fils: " << fils << " distance du pere: " << dist ;
			graph[pere].push_back(make_pair(fils,dist));
		}
		cout<< endl;

	}
	// soucre = 2
	string x = "2";
	int smallest = 4294967296;
	string nameOfTheSmallest;
	while()
	{
		int i =0;
		for(; i< graph[x].size(); i++)
		{
			distMap[graph[x][i].first].dist = graph[x][i].second;
			distMap[graph[x][i].first].prev = x;
			if(graph[x][i].second < smallest && distMap[graph[x][i].first].vue != true)
			{
				smallest = graph[x][i].second;
				nameOfTheSmallest= graph[x][i].first;
			}
		}	
		for(it = distMap.begin(); it != distMap.end(); it ++)
		{
			if(it->second.dist < smallest && it->second.vue != true)
			{
				smallest = it->second.dist;
				nameOfTheSmallest = it->first;
			}

		}
		distMap[nameOfTheSmallest].vue = true;
		x = nameOfTheSmallest;
	}


	return 0;
}
