#include <iostream>
#include <vector>
#include <fstream>
#include <sstream>
#include <utility>
#include <string>
#include <map>


using namespace std;

int compteur = 0;

struct node
{
	string prev;
	int dist;
	bool vue;
};

int main()
{
	fstream file;
	file.open("input.txt");
	string valeur;
	string pere;
	string fils;
	int dist;
	map < string, node > distMap;
	map < string, node >::iterator it;
	map < string, vector < pair <string, int> > > graph;

	while (file.eof() == false)
	{
		getline(file, valeur);
		stringstream s(valeur);
		s >> pere;
		cout << "pere: " << pere << " ";
		graph[pere];
		compteur++;
		distMap[pere].dist = -1;
		distMap[pere].prev = "-1";
		distMap[pere].vue = false;
		while (s >> fils)
		{
			s >> dist;
			cout << " -> " << "fils: " << fils << " distance du pere: " << dist;
			graph[pere].push_back(make_pair(fils, dist));
		}
		cout << endl;

	}
	string source = "2";
	string x = source;
	distMap[source].dist = 0;
	distMap[source].vue = 1;
	distMap[source].prev = "0";
	
	string nameOfTheSmallest;
	for (int m = 0; m < compteur; m++)
	{
		int smallest = 32767; // plus grand int
		int i = 0;
		for (; i< graph[x].size(); i++)
		{	
			if(distMap[graph[x][i].first].prev == "-1")
				distMap[graph[x][i].first].prev = x;
			if (distMap[graph[x][i].first].prev != "0" && (distMap[graph[x][i].first].dist == -1 || (graph[x][i].second + distMap[distMap[graph[x][i].first].prev].dist) < distMap[graph[x][i].first].dist))
			{
				
				distMap[graph[x][i].first].prev = x;
				distMap[graph[x][i].first].dist = (graph[x][i].second + distMap[distMap[graph[x][i].first].prev].dist);
				//distMap[graph[x][i].first].dist = (graph[x][i].second + distMap[graph[x][i].first].dist);
				
				/// distMap[6].prev is getting 7 instead of 5... BUG ALERT !!!
			}
				
		}
		for (it = distMap.begin(); it != distMap.end(); it++)
		{
			
			if (it->second.dist < smallest && it->second.vue != true && it->second.dist != -1)
			{
				smallest = it->second.dist;
				nameOfTheSmallest = it->first;
			}

		}
		distMap[nameOfTheSmallest].vue = true;
		x = nameOfTheSmallest;
	}
	for (it = distMap.begin(); it != distMap.end(); it++)
		{
			string print;
			cout << "from source("<<source<<") " << "to " << "node " << it->first << endl;
			cout << "path: " ;
			while(print!= "2")
			{
				
				it->second.prev;
			}
			
			
			

		}


	return 0;
}
